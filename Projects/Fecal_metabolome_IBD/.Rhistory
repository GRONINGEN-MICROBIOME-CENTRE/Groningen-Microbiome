colnames(tmp2)=c("ID","Diag","Risk_allele","Metabolite","Concentration_Metabolite")
tmp2=subset(tmp2,tmp2$Risk_allele!="NA")
tmp2$log_concentration=log10(as.numeric(as.character(tmp2$Concentration)))
my_plot=ggplot(tmp2, aes(as.factor(Risk_allele),log_concentration, fill=Diag)) + geom_boxplot(fill="white", outlier.size = 0) + geom_dotplot(stackdir = "center",binaxis = "y", dotsize=0.2, color=NA,position = "dodge")  + theme_bw() + scale_fill_manual(values = c("firebrick2", "black","blue2")) + facet_wrap(~ Metabolite)
print (my_plot)
}
for (f in 11:18){
tmp=genes_scfa_sel[,c(1:10,f)]
my_snp=colnames(genes_scfa_sel)[f]
tmp2=melt(tmp,id.vars = c(1,2,11), measure.vars=c(3:10))
colnames(tmp2)=c("ID","Diag","Risk_allele","Metabolite","Concentration_Metabolite")
tmp2=subset(tmp2,tmp2$Risk_allele!="NA")
tmp2$log_concentration=log10(as.numeric(as.character(tmp2$Concentration)))
my_plot=ggplot(tmp2, aes(as.factor(Risk_allele),log_concentration, fill=Diag)) + geom_boxplot(fill="white", outlier.size = 0) + geom_dotplot(stackdir = "center",binaxis = "y", dotsize=0.2, color=NA,position = "dodge")  + theme_bw() + scale_fill_manual(values = c("firebrick2", "black","blue2")) + facet_wrap(~ Metabolite) + lab(my_snp)
print (my_plot)
}
for (f in 11:18){
tmp=genes_scfa_sel[,c(1:10,f)]
my_snp=colnames(genes_scfa_sel)[f]
tmp2=melt(tmp,id.vars = c(1,2,11), measure.vars=c(3:10))
colnames(tmp2)=c("ID","Diag","Risk_allele","Metabolite","Concentration_Metabolite")
tmp2=subset(tmp2,tmp2$Risk_allele!="NA")
tmp2$log_concentration=log10(as.numeric(as.character(tmp2$Concentration)))
my_plot=ggplot(tmp2, aes(as.factor(Risk_allele),log_concentration, fill=Diag)) + geom_boxplot(fill="white", outlier.size = 0) + geom_dotplot(stackdir = "center",binaxis = "y", dotsize=0.2, color=NA,position = "dodge")  + theme_bw() + scale_fill_manual(values = c("firebrick2", "black","blue2")) + facet_wrap(~ Metabolite) + xlab(my_snp)
print (my_plot)
}
for (f in 11:18){
tmp=genes_scfa_sel[,c(1:10,f)]
my_snp=colnames(genes_scfa_sel)[f]
tmp2=melt(tmp,id.vars = c(1,2,11), measure.vars=c(3:10))
colnames(tmp2)=c("ID","Diag","Risk_allele","Metabolite","Concentration_Metabolite")
tmp2=subset(tmp2,tmp2$Risk_allele!="NA")
tmp2$log_concentration=log10(as.numeric(as.character(tmp2$Concentration)))
my_plot=ggplot(tmp2, aes(as.factor(Risk_allele),log_concentration, fill=Diag)) + geom_boxplot(fill="white", outlier.size = 0) + geom_dotplot(stackdir = "center",binaxis = "y", dotsize=0.6, color=NA,position = "dodge")  + theme_bw() + scale_fill_manual(values = c("firebrick2", "black","blue2")) + facet_wrap(~ Metabolite) + xlab(my_snp)
print (my_plot)
}
for (f in 11:18){
tmp=genes_scfa_sel[,c(1:10,f)]
my_snp=colnames(genes_scfa_sel)[f]
tmp2=melt(tmp,id.vars = c(1,2,11), measure.vars=c(3:10))
colnames(tmp2)=c("ID","Diag","Risk_allele","Metabolite","Concentration_Metabolite")
tmp2=subset(tmp2,tmp2$Risk_allele!="NA")
tmp2$log_concentration=log10(as.numeric(as.character(tmp2$Concentration)))
my_plot=ggplot(tmp2, aes(as.factor(Risk_allele),log_concentration, fill=Diag)) + geom_boxplot(fill="white", outlier.size = 0) + geom_dotplot(stackdir = "center",binaxis = "y", dotsize=0.4, color=NA,position = "dodge")  + theme_bw() + scale_fill_manual(values = c("firebrick2", "black","blue2")) + facet_wrap(~ Metabolite) + xlab(my_snp)
print (my_plot)
}
for (f in 11:18){
tmp=genes_scfa_sel[,c(1:10,f)]
my_snp=colnames(genes_scfa_sel)[f]
tmp2=melt(tmp,id.vars = c(1,2,11), measure.vars=c(3:10))
colnames(tmp2)=c("ID","Diag","Risk_allele","Metabolite","Concentration_Metabolite")
tmp2=subset(tmp2,tmp2$Risk_allele!="NA")
tmp2$log_concentration=log10(as.numeric(as.character(tmp2$Concentration)))
#my_plot=ggplot(tmp2, aes(as.factor(Risk_allele),log_concentration, fill=Diag)) + geom_boxplot(fill="white", outlier.size = 0) + geom_dotplot(stackdir = "center",binaxis = "y", dotsize=0.4, color=NA,position = "dodge")  + theme_bw() + scale_fill_manual(values = c("firebrick2", "black","blue2")) + facet_wrap(~ Metabolite) + xlab(my_snp)
my_plot=ggplot(tmp2, aes(as.factor(Risk_allele),log_concentration, fill=Diag)) + geom_violin(outlier.size = 0) + geom_dotplot(fill="gray72", alpha=0.4)  + theme_bw() + scale_fill_manual(values = c("firebrick2", "black","blue2")) + facet_wrap(~ Metabolite) + xlab(my_snp)
print (my_plot)
}
for (f in 11:18){
tmp=genes_scfa_sel[,c(1:10,f)]
my_snp=colnames(genes_scfa_sel)[f]
tmp2=melt(tmp,id.vars = c(1,2,11), measure.vars=c(3:10))
colnames(tmp2)=c("ID","Diag","Risk_allele","Metabolite","Concentration_Metabolite")
tmp2=subset(tmp2,tmp2$Risk_allele!="NA")
tmp2$log_concentration=log10(as.numeric(as.character(tmp2$Concentration)))
#my_plot=ggplot(tmp2, aes(as.factor(Risk_allele),log_concentration, fill=Diag)) + geom_boxplot(fill="white", outlier.size = 0) + geom_dotplot(stackdir = "center",binaxis = "y", dotsize=0.4, color=NA,position = "dodge")  + theme_bw() + scale_fill_manual(values = c("firebrick2", "black","blue2")) + facet_wrap(~ Metabolite) + xlab(my_snp)
my_plot=ggplot(tmp2, aes(as.factor(Risk_allele),log_concentration, fill=Diag)) + geom_violin(outlier.size = 0) + geom_jitter(fill="gray72", alpha=0.4)  + theme_bw() + scale_fill_manual(values = c("firebrick2", "black","blue2")) + facet_wrap(~ Metabolite) + xlab(my_snp)
print (my_plot)
}
for (f in 11:18){
tmp=genes_scfa_sel[,c(1:10,f)]
my_snp=colnames(genes_scfa_sel)[f]
tmp2=melt(tmp,id.vars = c(1,2,11), measure.vars=c(3:10))
colnames(tmp2)=c("ID","Diag","Risk_allele","Metabolite","Concentration_Metabolite")
tmp2=subset(tmp2,tmp2$Risk_allele!="NA")
tmp2$log_concentration=log10(as.numeric(as.character(tmp2$Concentration)))
#my_plot=ggplot(tmp2, aes(as.factor(Risk_allele),log_concentration, fill=Diag)) + geom_boxplot(fill="white", outlier.size = 0) + geom_dotplot(stackdir = "center",binaxis = "y", dotsize=0.4, color=NA,position = "dodge")  + theme_bw() + scale_fill_manual(values = c("firebrick2", "black","blue2")) + facet_wrap(~ Metabolite) + xlab(my_snp)
my_plot=ggplot(tmp2, aes(as.factor(Risk_allele),log_concentration, fill=Diag)) + geom_violin(outlier.size = 0) + geom_jitter(fill="gray72", alpha=0.4, size=2)  + theme_bw() + scale_fill_manual(values = c("firebrick2", "black","blue2")) + facet_wrap(~ Metabolite) + xlab(my_snp)
print (my_plot)
}
for (f in 11:18){
tmp=genes_scfa_sel[,c(1:10,f)]
my_snp=colnames(genes_scfa_sel)[f]
tmp2=melt(tmp,id.vars = c(1,2,11), measure.vars=c(3:10))
colnames(tmp2)=c("ID","Diag","Risk_allele","Metabolite","Concentration_Metabolite")
tmp2=subset(tmp2,tmp2$Risk_allele!="NA")
tmp2$log_concentration=log10(as.numeric(as.character(tmp2$Concentration)))
#my_plot=ggplot(tmp2, aes(as.factor(Risk_allele),log_concentration, fill=Diag)) + geom_boxplot(fill="white", outlier.size = 0) + geom_dotplot(stackdir = "center",binaxis = "y", dotsize=0.4, color=NA,position = "dodge")  + theme_bw() + scale_fill_manual(values = c("firebrick2", "black","blue2")) + facet_wrap(~ Metabolite) + xlab(my_snp)
my_plot=ggplot(tmp2, aes(as.factor(Risk_allele),log_concentration, fill=Diag)) + geom_violin() + geom_jitter(fill="gray72", alpha=0.4, size=0.2)  + theme_bw() + scale_fill_manual(values = c("firebrick2", "black","blue2")) + facet_wrap(~ Metabolite) + xlab(my_snp)
print (my_plot)
}
for (f in 11:18){
tmp=genes_scfa_sel[,c(1:10,f)]
my_snp=colnames(genes_scfa_sel)[f]
tmp2=melt(tmp,id.vars = c(1,2,11), measure.vars=c(3:10))
colnames(tmp2)=c("ID","Diag","Risk_allele","Metabolite","Concentration_Metabolite")
tmp2=subset(tmp2,tmp2$Risk_allele!="NA")
tmp2$log_concentration=log10(as.numeric(as.character(tmp2$Concentration)))
#my_plot=ggplot(tmp2, aes(as.factor(Risk_allele),log_concentration, fill=Diag)) + geom_boxplot(fill="white", outlier.size = 0) + geom_dotplot(stackdir = "center",binaxis = "y", dotsize=0.4, color=NA,position = "dodge")  + theme_bw() + scale_fill_manual(values = c("firebrick2", "black","blue2")) + facet_wrap(~ Metabolite) + xlab(my_snp)
my_plot=ggplot(tmp2, aes(as.factor(Risk_allele),log_concentration, fill=Diag)) + geom_violin(outlier.size = 0) + geom_point(fill="gray72", alpha=0.4, position = position_jitterdodge())  + theme_bw() + scale_fill_manual(values = c("firebrick2", "black","blue2")) + facet_wrap(~ Metabolite) + xlab(my_snp)
print (my_plot)
}
for (f in 11:18){
tmp=genes_scfa_sel[,c(1:10,f)]
my_snp=colnames(genes_scfa_sel)[f]
tmp2=melt(tmp,id.vars = c(1,2,11), measure.vars=c(3:10))
colnames(tmp2)=c("ID","Diag","Risk_allele","Metabolite","Concentration_Metabolite")
tmp2=subset(tmp2,tmp2$Risk_allele!="NA")
tmp2$log_concentration=log10(as.numeric(as.character(tmp2$Concentration)))
#my_plot=ggplot(tmp2, aes(as.factor(Risk_allele),log_concentration, fill=Diag)) + geom_boxplot(fill="white", outlier.size = 0) + geom_dotplot(stackdir = "center",binaxis = "y", dotsize=0.4, color=NA,position = "dodge")  + theme_bw() + scale_fill_manual(values = c("firebrick2", "black","blue2")) + facet_wrap(~ Metabolite) + xlab(my_snp)
#my_plot=ggplot(tmp2, aes(as.factor(Risk_allele),log_concentration, fill=Diag)) + geom_violin(outlier.size = 0) + geom_jitter(fill="gray72", alpha=0.4, size=2)  + theme_bw() + scale_fill_manual(values = c("firebrick2", "black","blue2")) + facet_wrap(~ Metabolite) + xlab(my_snp)
my_plot=ggplot(tmp2, aes(as.factor(Risk_allele),log_concentration, fill=Diag)) + geom_violin(outlier.size = 0) + geom_point(fill="gray72", alpha=0.4, size=2,position=position_jitterdodge())  + theme_bw() + scale_fill_manual(values = c("firebrick2", "black","blue2")) + facet_wrap(~ Metabolite) + xlab(my_snp)
print (my_plot)
}
my_plot=ggplot(tmp2, aes(as.factor(Risk_allele),log_concentration, fill=Diag)) + geom_violin(outlier.size = 0) + geom_point(colour="gray72", alpha=0.4, size=2,position=position_jitterdodge())  + theme_bw() + scale_fill_manual(values = c("firebrick2", "black","blue2")) + facet_wrap(~ Metabolite) + xlab(my_snp)
print (my_plot)
ggplot(tmp2, aes(as.factor(Risk_allele),log_concentration, fill=Diag)) + geom_violin(outlier.size = 0) + geom_point(alpha=0.4, size=2,position=position_jitterdodge())  + theme_bw() + scale_fill_manual(values = c("firebrick2", "black","blue2")) + facet_wrap(~ Metabolite) + xlab(my_snp)
my_plot=ggplot(tmp2, aes(as.factor(Risk_allele),log_concentration, fill=Diag)) + geom_violin(outlier.size = 0) + geom_point(colour=aes(Diag),alpha=0.4, size=2,position=position_jitterdodge())  + theme_bw() + scale_fill_manual(values = c("firebrick2", "black","blue2")) + facet_wrap(~ Metabolite) + xlab(my_snp)
my_plot=ggplot(tmp2, aes(as.factor(Risk_allele),log_concentration, fill=Diag)) + geom_violin(outlier.size = 0) + geom_point(colour=Diag,alpha=0.4, size=2,position=position_jitterdodge())  + theme_bw() + scale_fill_manual(values = c("firebrick2", "black","blue2")) + facet_wrap(~ Metabolite) + xlab(my_snp)
my_plot=ggplot(tmp2, aes(as.factor(Risk_allele),log_concentration, fill=Diag)) + geom_violin(outlier.size = 0) + geom_point(alpha=0.4, size=2,position=position_jitterdodge())  + theme_bw() + scale_fill_manual(values = c("firebrick2", "black","blue2")) + facet_wrap(~ Metabolite) + xlab(my_snp)
my_plot=ggplot(tmp2, aes(as.factor(Risk_allele),log_concentration, fill=Diag)) + geom_violin(outlier.size = 0) + geom_point(alpha=0.2, size=2,position=position_jitterdodge())  + theme_bw() + scale_fill_manual(values = c("firebrick2", "black","blue2")) + facet_wrap(~ Metabolite) + xlab(my_snp)
ggplot(my_plot)
ggplot(tmp2, aes(as.factor(Risk_allele),log_concentration, fill=Diag)) + geom_violin(outlier.size = 0) + geom_point(colour=aes(Diag),alpha=0.4, size=2,position=position_jitterdodge())  + theme_bw() + scale_fill_manual(values = c("firebrick2", "black","blue2")) + facet_wrap(~ Metabolite) + xlab(my_snp)
ggplot(tmp2, aes(as.factor(Risk_allele),log_concentration, fill=Diag)) + geom_violin(outlier.size = 0) + geom_point(colour=Diag,alpha=0.4, size=2,position=position_jitterdodge())  + theme_bw() + scale_fill_manual(values = c("firebrick2", "black","blue2")) + facet_wrap(~ Metabolite) + xlab(my_snp)
ggplot(tmp2, aes(as.factor(Risk_allele),log_concentration, fill=Diag)) + geom_violin(outlier.size = 0) + geom_point(alpha=0.4, size=2,position=position_jitterdodge())  + theme_bw() + scale_fill_manual(values = c("firebrick2", "black","blue2")) + facet_wrap(~ Metabolite) + xlab(my_snp)
ggplot(tmp2, aes(as.factor(Risk_allele),log_concentration, fill=Diag)) + geom_violin(outlier.size = 0) + geom_point(alpha=0.2, size=2,position=position_jitterdodge())  + theme_bw() + scale_fill_manual(values = c("firebrick2", "black","blue2")) + facet_wrap(~ Metabolite) + xlab(my_snp)
ggplot(tmp2, aes(as.factor(Risk_allele),log_concentration, fill=Diag)) + geom_violin(outlier.size = 0) + geom_point(aes(colour=Diag)alpha=0.2, size=2,position=position_jitterdodge())  + theme_bw() + scale_fill_manual(values = c("firebrick2", "black","blue2")) + facet_wrap(~ Metabolite) + xlab(my_snp)
ggplot(tmp2, aes(as.factor(Risk_allele),log_concentration, fill=Diag)) + geom_violin(outlier.size = 0) + geom_point(aes(colour=Diag),alpha=0.2, size=2,position=position_jitterdodge())  + theme_bw() + scale_fill_manual(values = c("firebrick2", "black","blue2")) + facet_wrap(~ Metabolite) + xlab(my_snp)
ggplot(tmp2, aes(as.factor(Risk_allele),log_concentration, fill=Diag)) + geom_violin(outlier.size = 0) + geom_point(aes(colour=Diag),alpha=0.2, size=2,position=position_jitterdodge())  + theme_bw() + scale_fill_manual(values = c("firebrick2", "black","blue2")) + facet_wrap(~ Metabolite) + xlab(my_snp)+ scale_colour_manual(values = c("firebrick2", "black","blue2"))
ggplot(tmp2, aes(as.factor(Risk_allele),log_concentration, fill=Diag)) + geom_boxplot(fill="white", outlier.size = 0) + geom_dotplot(stackdir = "center",binaxis = "y", dotsize=0.4, color=NA,position = "dodge")  + theme_bw() + scale_fill_manual(values = c("firebrick2", "black","blue2")) + facet_wrap(~ Metabolite) + xlab(my_snp)
y_plot=ggplot(tmp2, aes(as.factor(Risk_allele),log_concentration, fill=Diag)) + geom_violin(outlier.size = 0) + geom_jitter(fill="gray72", alpha=0.4, size=2)  + theme_bw() + scale_fill_manual(values = c("firebrick2", "black","blue2")) + facet_wrap(~ Metabolite) + xlab(my_snp)
y_plot
for (f in 11:18){
tmp=genes_scfa_sel[,c(1:10,f)]
my_snp=colnames(genes_scfa_sel)[f]
tmp2=melt(tmp,id.vars = c(1,2,11), measure.vars=c(3:10))
colnames(tmp2)=c("ID","Diag","Risk_allele","Metabolite","Concentration_Metabolite")
tmp2=subset(tmp2,tmp2$Risk_allele!="NA")
tmp2$log_concentration=log10(as.numeric(as.character(tmp2$Concentration)))
#my_plot=ggplot(tmp2, aes(as.factor(Risk_allele),log_concentration, fill=Diag)) + geom_boxplot(fill="white", outlier.size = 0) + geom_dotplot(stackdir = "center",binaxis = "y", dotsize=0.4, color=NA,position = "dodge")  + theme_bw() + scale_fill_manual(values = c("firebrick2", "black","blue2")) + facet_wrap(~ Metabolite) + xlab(my_snp)
#my_plot=ggplot(tmp2, aes(as.factor(Risk_allele),log_concentration, fill=Diag)) + geom_violin(outlier.size = 0) + geom_jitter(fill="gray72", alpha=0.4, size=2)  + theme_bw() + scale_fill_manual(values = c("firebrick2", "black","blue2")) + facet_wrap(~ Metabolite) + xlab(my_snp)
ggplot(tmp2, aes(as.factor(Risk_allele),log_concentration, fill=Diag)) + geom_violin(outlier.size = 0) + geom_point(aes(colour=Diag),alpha=0.2, size=2,position=position_jitterdodge())  + theme_bw() + scale_fill_manual(values = c("firebrick2", "black","blue2")) + facet_wrap(~ Metabolite) + xlab(my_snp)+ scale_colour_manual(values = c("firebrick2", "black","blue2"))
print (my_plot)
}
for (f in 11:18){
tmp=genes_scfa_sel[,c(1:10,f)]
my_snp=colnames(genes_scfa_sel)[f]
tmp2=melt(tmp,id.vars = c(1,2,11), measure.vars=c(3:10))
colnames(tmp2)=c("ID","Diag","Risk_allele","Metabolite","Concentration_Metabolite")
tmp2=subset(tmp2,tmp2$Risk_allele!="NA")
tmp2$log_concentration=log10(as.numeric(as.character(tmp2$Concentration)))
#my_plot=ggplot(tmp2, aes(as.factor(Risk_allele),log_concentration, fill=Diag)) + geom_boxplot(fill="white", outlier.size = 0) + geom_dotplot(stackdir = "center",binaxis = "y", dotsize=0.4, color=NA,position = "dodge")  + theme_bw() + scale_fill_manual(values = c("firebrick2", "black","blue2")) + facet_wrap(~ Metabolite) + xlab(my_snp)
#my_plot=ggplot(tmp2, aes(as.factor(Risk_allele),log_concentration, fill=Diag)) + geom_violin(outlier.size = 0) + geom_jitter(fill="gray72", alpha=0.4, size=2)  + theme_bw() + scale_fill_manual(values = c("firebrick2", "black","blue2")) + facet_wrap(~ Metabolite) + xlab(my_snp)
my_plot=ggplot(tmp2, aes(as.factor(Risk_allele),log_concentration, fill=Diag)) + geom_violin(outlier.size = 0) + geom_point(aes(colour=Diag),alpha=0.2, size=2,position=position_jitterdodge())  + theme_bw() + scale_fill_manual(values = c("firebrick2", "black","blue2")) + facet_wrap(~ Metabolite) + xlab(my_snp)+ scale_colour_manual(values = c("firebrick2", "black","blue2"))
print (my_plot)
}
for (f in 11:18){
tmp=genes_scfa_sel[,c(1:10,f)]
my_snp=colnames(genes_scfa_sel)[f]
tmp2=melt(tmp,id.vars = c(1,2,11), measure.vars=c(3:10))
colnames(tmp2)=c("ID","Diag","Risk_allele","Metabolite","Concentration_Metabolite")
tmp2=subset(tmp2,tmp2$Risk_allele!="NA")
tmp2$log_concentration=log10(as.numeric(as.character(tmp2$Concentration)))
#my_plot=ggplot(tmp2, aes(as.factor(Risk_allele),log_concentration, fill=Diag)) + geom_boxplot(fill="white", outlier.size = 0) + geom_dotplot(stackdir = "center",binaxis = "y", dotsize=0.4, color=NA,position = "dodge")  + theme_bw() + scale_fill_manual(values = c("firebrick2", "black","blue2")) + facet_wrap(~ Metabolite) + xlab(my_snp)
#my_plot=ggplot(tmp2, aes(as.factor(Risk_allele),log_concentration, fill=Diag)) + geom_violin(outlier.size = 0) + geom_jitter(fill="gray72", alpha=0.4, size=2)  + theme_bw() + scale_fill_manual(values = c("firebrick2", "black","blue2")) + facet_wrap(~ Metabolite) + xlab(my_snp)
my_plot=ggplot(tmp2, aes(as.factor(Risk_allele),log_concentration, fill=Diag)) + geom_violin(alpha=0.3) + geom_point(aes(colour=Diag),alpha=0.7, size=2,position=position_jitterdodge())  + theme_bw() + scale_fill_manual(values = c("firebrick2", "black","blue2")) + facet_wrap(~ Metabolite) + xlab(my_snp)+ scale_colour_manual(values = c("firebrick2", "black","blue2"))
print (my_plot)
}
ggplot(tmp2, aes(as.factor(Risk_allele),log_concentration, fill=Diag)) + geom_violin(alpha=0.3) + geom_point(aes(colour=Diag),alpha=0.7,shape=1, size=2,position=position_jitterdodge())  + theme_bw() + scale_fill_manual(values = c("firebrick2", "black","blue2")) + facet_wrap(~ Metabolite) + xlab(my_snp)+ scale_colour_manual(values = c("firebrick2", "black","blue2"))
ggplot(tmp2, aes(as.factor(Risk_allele),log_concentration, fill=Diag)) + geom_violin(alpha=0.3) + geom_point(aes(colour=Diag),alpha=0.7, size=2,position=position_jitterdodge())  + theme_bw() + scale_fill_manual(values = c("firebrick2", "black","blue2")) + facet_wrap(~ Metabolite) + xlab(my_snp)+ scale_colour_manual(values = c("firebrick2", "black","blue2"))
ggplotly(my_plot)
ggplot(tmp2, aes(as.factor(Risk_allele),log_concentration)) + geom_boxplot(fill="white", outlier.size = 0) + geom_dotplot(stackdir = "center",binaxis = "y", dotsize=0.4, color=NA,position = "dodge")  + theme_bw() + scale_fill_manual(values = c("firebrick2", "black","blue2")) + facet_wrap(~ Metabolite) + xlab(my_snp)
ggplot(tmp2, aes(as.factor(Risk_allele),log_concentration)) + geom_violin(fill="white") + theme_bw() + scale_fill_manual(values = c("firebrick2", "black","blue2")) + facet_wrap(~ Metabolite) + xlab(my_snp)
ggplot(tmp2, aes(as.factor(Risk_allele),log_concentration)) + geom_violin() + theme_bw() + scale_fill_manual(values = c("firebrick2", "black","blue2")) + facet_wrap(~ Metabolite) + xlab(my_snp)+ scale_fill_brewer()
ggplot(tmp2, aes(as.factor(Risk_allele),log_concentration)) + geom_violin() + theme_bw() + scale_fill_manual(values = c("firebrick2", "black","blue2")) + facet_wrap(~ Metabolite) + xlab(my_snp)+ scale_color_brewer()
ggplot(tmp2, aes(as.factor(Risk_allele),log_concentration), fill=as.factor(Risk_allele)) + geom_violin() + theme_bw() + scale_fill_manual(values = c("firebrick2", "black","blue2")) + facet_wrap(~ Metabolite) + xlab(my_snp)+ scale_fill_brewer()
ggplot(tmp2, aes(as.factor(Risk_allele),log_concentration), fill=as.factor(Risk_allele)) + geom_violin() + theme_bw() + facet_wrap(~ Metabolite) + xlab(my_snp)
ggplot(tmp2, aes(as.factor(Risk_allele),log_concentration), fill=as.factor(Risk_allele)) + geom_violin() + theme_bw() + facet_wrap(~ Metabolite) + xlab(my_snp) + scale_fill_brewer()
ggplot(tmp2, aes(as.factor(Risk_allele),log_concentration), colour=as.factor(Risk_allele)) + geom_violin() + theme_bw() + facet_wrap(~ Metabolite) + xlab(my_snp) + scale_color_brewer()
ggplot(tmp2, aes(as.factor(Risk_allele),log_concentration), color=as.factor(Risk_allele)) + geom_violin() + theme_bw() + facet_wrap(~ Metabolite) + xlab(my_snp) + scale_color_brewer()
ggplot(tmp2, aes(as.factor(Risk_allele),log_concentration)) + geom_violin(aes(color=Risk_allele)) + theme_bw() + facet_wrap(~ Metabolite) + xlab(my_snp) + scale_color_brewer()
ggplot(tmp2, aes(as.factor(Risk_allele),log_concentration), fill=as.factor(Risk_allele)) + geom_violin() + theme_bw() + scale_fill_manual(values = c("firebrick2", "black","blue2")) + facet_wrap(~ Metabolite) + xlab(my_snp)+ scale_fill_brewer()
ggplot(tmp2, aes(as.factor(Risk_allele),log_concentration), fill=as.factor(Risk_allele)) + geom_violin() + theme_bw() + facet_wrap(~ Metabolite) + xlab(my_snp)
ggplot(tmp2, aes(as.factor(Risk_allele),log_concentration), fill=as.factor(Risk_allele)) + geom_violin() + theme_bw() + facet_wrap(~ Metabolite) + xlab(my_snp) +geom_point(colour="red",alpha=0.7, size=2,position=position_jitterdodge())
ggplot(tmp2, aes(as.factor(Risk_allele),log_concentration), fill=as.factor(Risk_allele)) + geom_violin() + theme_bw() + facet_wrap(~ Metabolite) + xlab(my_snp) +geom_point(colour="red",alpha=0.7, size=2)
ggplot(tmp2, aes(as.factor(Risk_allele),log_concentration), fill=as.factor(Risk_allele)) + geom_violin(fill="grey80") + theme_bw() + facet_wrap(~ Metabolite) + xlab(my_snp) +geom_point(colour="red",alpha=0.7, size=2)
ggplot(tmp2, aes(as.factor(Risk_allele),log_concentration), fill=as.factor(Risk_allele)) + geom_violin(fill="grey80") + theme_bw() + facet_wrap(~ Metabolite) + xlab(my_snp) +geom_point(colour="firebrick1",alpha=0.7, size=2)
ggplot(tmp2, aes(as.factor(Risk_allele),log_concentration), fill=as.factor(Risk_allele)) + geom_violin(fill="grey80") + theme_bw() + facet_wrap(~ Metabolite) + xlab(my_snp) +geom_point(colour="firebrick3",alpha=0.7, size=2)
ggplot(tmp2, aes(as.factor(Risk_allele),log_concentration), fill=as.factor(Risk_allele)) + geom_violin(fill="grey80") + theme_bw() + facet_wrap(~ Metabolite) + xlab(my_snp) +geom_point(colour="salmon",alpha=0.7, size=2)
library(corrplot)
library(plotly)
library(pheatmap)
library(NbClust)
library(reshape2)
library(ggrepel)
library(dplyr)
library(eulerr)
library(vegan)
library(ape)
library(ggridges)
library (UpSetR)
library(ggplot2)
library(psych)
library(ggord)
library(mice)
library(caret)
library(factoextra)
library(Rtsne)
library(heatmaply)
library(ggpubr)
library(ggbiplot)
library(coin)
library(DT)
library(pvclust)
library(compositions)
library(RColorBrewer)
####################################
#Inverse rank transformation function.
####################################
invrank= function(x) {qnorm((rank(x,na.last="keep")-0.5)/sum(!is.na(x)))}
###############################
#negate in (to exclude columns)
###############################
`%ni%` <- Negate(`%in%`)
#####################################
#Imputation and filtering metabolites
#####################################
impute_missing_values=function(x, samples_row=T, method="hfmin", missing_filter=0){
#if samples are in columns transpose
if (!samples_row){
x=as.data.frame(t(x))
}
#Exclude/keep columns that pass the missigness threshold
if (missing_filter>1){
stop("\n Hey! \n Values should be a proportion of missing values allowed per column: a value from 0 to 1")
}
col_ori=ncol(x)
col_keep=colnames(x)[colSums(!is.na(x))/nrow(x)>missing_filter]
x=x[,col_keep]
my_num_removed=col_ori-ncol(x)
warning (paste(my_num_removed, "columns removed due to many missing values"))
if (method=="zero"){
x[is.na(x)]=0
}
else if (method=="min"){
x[sapply(x, is.numeric)] <- lapply(x[sapply(x, is.numeric)], function(a) ifelse(is.na(a), min(a, na.rm = TRUE), a))
}
else if (method=="hfmin"){
x[sapply(x, is.numeric)] <- lapply(x[sapply(x, is.numeric)], function(a) ifelse(is.na(a), min(a, na.rm = TRUE)/2, a))
}
else if (method=="mean"){
x[sapply(x, is.numeric)] <- lapply(x[sapply(x, is.numeric)], function(a) ifelse(is.na(a), mean(a, na.rm = TRUE), a))
}
else if (method=="median"){
x[sapply(x, is.numeric)] <- lapply(x[sapply(x, is.numeric)], function(a) ifelse(is.na(a), median(a, na.rm = TRUE), a))
}
else if (method=="none"){
x=x
}
else{
stop("\n Hey! \n Method parameters for imputing missing values per column are: \n min -> min (col), hfmin -> min(col)/2, mean -> mean (col), median -> median(col), mice -> using mice package [Multivariate Imputation By Chained Equations] defaults \n")
}
return(as.data.frame(x))
}
##############################
# Summary stats
##############################
summary_stats=function(feature_matrix,pheno){
a=1
num_var=length(levels(pheno[,1]))
print (paste("Number of phenotypes detected for summary statistics:", num_var))
summary_met=matrix(nrow=ncol(feature_matrix),ncol=(9*(num_var+1))+1)
for (i in 1:ncol(feature_matrix)){
#print (colnames(feature_matrix)[i])
pos=2
summary_met[i,pos]=sum(is.na(feature_matrix[,i]))
pos=pos+1
summary_met[i,pos]=sum(!is.na(feature_matrix[,i]))
if (sum(is.na(feature_matrix[,i]) == nrow(feature_matrix))){
pos=pos+1
summary_met[i,pos]="NA"
pos=pos+1
summary_met[i,pos]="NA"
pos=pos+1
summary_met[i,pos]="NA"
pos=pos+1
summary_met[i,pos]="NA"
pos=pos+1
summary_met[i,pos]="NA"
pos=pos+1
summary_met[i,pos]="NA"
pos=pos+1
summary_met[i,pos]="NA"
}
else{
pos=pos+1
summary_met[i,pos]=min(feature_matrix[,i], na.rm = T)
pos=pos+1
summary_met[i,pos]=max(feature_matrix[,i], na.rm = T)
pos=pos+1
summary_met[i,pos]=mean(feature_matrix[,i], na.rm = T)
pos=pos+1
summary_met[i,pos]=median(feature_matrix[,i], na.rm = T)
pos=pos+1
summary_met[i,pos]=sd(feature_matrix[,i], na.rm = T)
pos=pos+1
summary_met[i,pos]=length(boxplot(feature_matrix[,i], plot=FALSE, range = 3)$out)
if (sum(!is.na(feature_matrix[,i])) < 10){
pos=pos+1
summary_met[i,pos]="NA"
} else {
nor=shapiro.test(feature_matrix[,i])
pos=pos+1
summary_met[i,pos]=nor$p.value>=0.05
}
}
for (x in levels (pheno[,1])){
id_list=rownames(pheno)[pheno[,1]==x]
tmp_all=feature_matrix[rownames(feature_matrix)%in%id_list,]
pos=pos+1
summary_met[i,pos]=sum(is.na(tmp_all[,i]))
pos=pos+1
summary_met[i,pos]=sum(!is.na(tmp_all[,i]))
if (sum(is.na(tmp_all[,i]) == nrow(tmp_all))){
pos=pos+1
summary_met[i,pos]="NA"
pos=pos+1
summary_met[i,pos]="NA"
pos=pos+1
summary_met[i,pos]="NA"
pos=pos+1
summary_met[i,pos]="NA"
pos=pos+1
summary_met[i,pos]="NA"
pos=pos+1
summary_met[i,pos]="NA"
pos=pos+1
summary_met[i,pos]="NA"
}else{
pos=pos+1
summary_met[i,pos]=min(tmp_all[,i], na.rm = T)
pos=pos+1
summary_met[i,pos]=max(tmp_all[,i], na.rm = T)
pos=pos+1
summary_met[i,pos]=mean(tmp_all[,i], na.rm = T)
pos=pos+1
summary_met[i,pos]=median(tmp_all[,i], na.rm = T)
pos=pos+1
summary_met[i,pos]=sd(tmp_all[,i], na.rm = T)
pos=pos+1
summary_met[i,pos]=length(boxplot(tmp_all[,i], plot=FALSE, range = 3)$out)
if (sum(!is.na(tmp_all[,i])) < 10){
pos=pos+1
summary_met[i,pos]="NA"
} else {
nor=shapiro.test(tmp_all[,i])
pos=pos+1
summary_met[i,pos]=nor$p.value>=0.05
}
}
}
}
summary_met[,1]=colnames(feature_matrix)
my_colnames=c("Metabolite", "NAs","Non_NAs", "Min", "Max", "Mean", "Median","SD", "Outliers_x3IQR","Normal_distrib")
for (o in levels (pheno[,1])){
my_colnames=c(my_colnames,paste("NAs",o, sep="_"))
my_colnames=c(my_colnames,paste("Non_NAs",o,sep="_"))
my_colnames=c(my_colnames,paste("Min",o,sep="_"))
my_colnames=c(my_colnames,paste("Max",o,sep="_"))
my_colnames=c(my_colnames,paste("Mean",o,sep="_"))
my_colnames=c(my_colnames,paste("Median",o,sep="_"))
my_colnames=c(my_colnames,paste("SD",o,sep="_"))
my_colnames=c(my_colnames,paste("Outliers_x3IQR",o,sep="_"))
my_colnames=c(my_colnames,paste("Normal_distrib",o,sep="_"))
}
colnames(summary_met)=my_colnames
return(summary_met)
}
###############################################
# Filtering and transforming taxa             #
###############################################
transform_and_filter_taxa=function(x, samples_row=T, method="asin", missing_filter=0){
x[x=="NA"]=0
x[x=="NaN"]=0
#if samples are in columns transpose
if (!samples_row){
x=as.data.frame(t(x))
}
#Exclude/keep columns that pass the missigness threshold
if (missing_filter>100){
stop("\n Hey! \n Values should be a proportion of missing values allowed per column: a value from 0 to 100")
}
x_filt=x[,((colSums(x !=0) / nrow(x)) *100 )>missing_filter]
my_num_removed=ncol(x)-ncol(x_filt)
print (paste(my_num_removed, "species removed due to many missing values"))
if (method=="asin"){
x_filt=x_filt/100
x_filt=asin(sqrt(x_filt))
} else if (method=="log"){
#replace 0 by the half of the smallest value observed
my_min=min(x_filt[x_filt>0]/2)
x_filt=x_filt+my_min
x_filt=log10(x_filt)
}else if (method=="clr"){
x_filt=x_filt/100
#replace 0 by the half of the smallest value observed
my_min=min(x_filt[x_filt>0]/2)
x_filt=x_filt+my_min
#clr transformation (adapted from microbiome package function)
d <- apply(x_filt, 2, function(b) {
log(b) - mean(log(b))
})
x_filt=d
}
return(as.data.frame(x_filt))
}
#transformed metabolites (raw data transformed to adjust distrubution, medians = 1)
#all_metabolites <- read.delim("~/Documents/Project_Metabolome/1.Input_files/all_metabolites2.txt", row.names=1)
# a) Raw values (AUC of peaks)
all_metabolites_raw <- read.delim("~/Documents/Project_Metabolome/1.Input_files/all_metabolites_raw2.txt", row.names=1)
# b) SCFA
SCFA <- read.delim("~/Documents/Project_Metabolome/1.Input_files/old/SCFA.txt")
# c) Phenotypes
phenos_ibd=read.delim("~/Documents/Project_Metabolome/1.Input_files/Merged_IBD_phenos_clean_v2.txt",row.names = 1)
phenos_lld=read.delim("~/Documents/Project_Metabolome/1.Input_files/Merged_LLD_phenos_clean_v2.txt", row.names=1)
cc_pheno=read.delim("~/Documents/Project_Metabolome/1.Input_files/case_control_meta_v1.txt", row.names=1)
# d) Experiment variables
my_batch=read.delim("~/Documents/Project_Metabolome/1.Input_files/Metabolon_preparation_v2.txt", row.names=1)
# e) Genetics
# f) Metagenomic taxa (add metagenomic genes/pathways)
IBD_taxa <- read.delim("~/Documents/Project_Metabolome/2.taxa/IBD_taxonomy_unstrat_clean.txt", row.names=1)
LLD_taxa <- read.delim("~/Documents/Project_Metabolome/2.taxa/LLD_taxonomy_unstrat_clean.txt", row.names=1)
# g) Metabolites annotation
annot <- read.delim("~/Documents/Project_Metabolome/1.Input_files/info_metabolites_v2.txt", row.names=1)
annot$SUPER.PATHWAY.1=NULL
# h) ID's index (translate from different data modalities metabolomics <-> metagenomic <-> phenotypes)
IDs_LLD <- read.delim("~/Documents/Project_Metabolome/1.Input_files/IDs_LLD.txt", header=FALSE)
IDs_IBD <- read.delim("~/Documents/Project_Metabolome/1.Input_files/IDs_IBD.txt", header=FALSE)
#Change Metabolon ids to UMCG ids to connect later to phenotypes
all_raw=as.data.frame(t(all_metabolites_raw))
# Select IDs
IDs_IBD=IDs_IBD[,c(1,5)]
IDs_LLD$V2=NULL
# [IMPORTANT] Table with matching ids between UMCG and Metabolon
IDs=data.frame(rbind(as.matrix(IDs_IBD), as.matrix(IDs_LLD)))
rownames(IDs)=IDs$V1
IDs$V1=NULL
# Merge to replace the ids Metabolon => UMCG
all_new_ID_raw=merge(IDs,all_raw, by="row.names")
rownames(all_new_ID_raw)=all_new_ID_raw$V5
all_new_ID_raw$Row.names=NULL
all_new_ID_raw$V5=NULL
#Repeat for the batch information: Metabolon ID => UMCG ID
my_batch_id=merge(IDs,my_batch, by="row.names")
rownames(my_batch_id)=my_batch_id$V5
my_batch_id$Row.names=NULL
my_batch_id$V5=NULL
#In case that we use the transformed data provided by Metabolon
#all=as.data.frame(t(all_metabolites))
#all_new_ID=merge(IDs,all, by="row.names")
#row.names(all_new_ID)=all_new_ID$V5
#all_new_ID$V5=NULL
#all_new_ID$Row.names=NULL
#all_new_ID=all_new_ID[row.names(all_new_ID)%ni%remove_pouch_stoma,]
#all_new_ID_with_stoma=all_new_ID
met_2=as.data.frame(table(annot$SUPER.PATHWAY))
met_1=as.data.frame(table(annot$SUB.PATHWAY))
yy=ggplot(met_2, aes(x = reorder(Var1, -Freq),Freq)) + geom_bar(stat = "identity", color="black") + theme_classic() + theme(axis.title.x = element_blank(),axis.text.y = element_text(size = 12)) + coord_flip() + xlab("") + ylab("Number of metabolites")
ggplotly(yy)
xx=ggplot(met_1, aes(x = reorder(Var1, -Freq),Freq)) + geom_bar(stat = "identity", color="black") + theme_classic() + theme(axis.title.x = element_blank(),axis.text.y = element_text(size = 5)) + coord_flip() + xlab("") + ylab("Number of metabolites")
ggplotly(xx)
remove_pouch_stoma=rownames(phenos_ibd)[phenos_ibd$ibd_CurrentStomaOrPouch=="yes"]
#Keep data of the participants with stoma
all_new_ID_raw_with_stoma=all_new_ID_raw
#Remove
all_new_ID_raw=all_new_ID_raw[row.names(all_new_ID_raw)%ni%remove_pouch_stoma,]
cc_pheno=cc_pheno[row.names(cc_pheno)%ni%remove_pouch_stoma,]
print (paste("Number of samples excluded due to pouch or stoma:", length(remove_pouch_stoma)))
all_new_ID_tmp=as.data.frame(t(all_new_ID_raw))
#apply log10 transformation + scale
all_new_ID_tmp=log10(all_new_ID_tmp)
#scale date, mean =0 , sd =1
all_new_ID_tmp <- scale(all_new_ID_tmp)
#Impute na's
### WARNING: now we are using the half of the minimum observed value per metabolite, in the future => KNN imputation
all_new_ID=impute_missing_values(all_new_ID_tmp,samples_row = T, method = "hfmin", missing_filter = 0)
View(all_new_ID_tmp)
all_new_ID_tmp=as.data.frame(t(all_new_ID_raw))
#apply log10 transformation + scale
all_new_ID_tmp=log10(all_new_ID_tmp)
#scale date, mean =0 , sd =1
all_new_ID_tmp <- scale(all_new_ID_tmp)
#Impute na's
### WARNING: now we are using the half of the minimum observed value per metabolite, in the future => KNN imputation
all_new_ID=impute_missing_values(all_new_ID_tmp,samples_row = T, method = "hfmin", missing_filter = 0)
View(all_new_ID_raw)
View(all_metabolites_raw)
View(all_metabolites_raw)
View(all_new_ID_raw)
all_new_ID_tmp=as.data.frame(t(all_new_ID_raw))
View(all_new_ID_tmp)
View(all_new_ID_raw)
all_new_ID_tmp=log10(all_new_ID_raw)
View(all_new_ID_tmp)
all_new_ID_tmp <- scale(all_new_ID_tmp)
all_new_ID=impute_missing_values(all_new_ID_tmp,samples_row = T, method = "hfmin", missing_filter = 0)
warnings()
View(all_new_ID_tmp)
View(all_new_ID)
all_new_ID_tmp=log10(all_new_ID_raw)
#scale date, mean =0 , sd =1
all_new_ID_tmp <- as.data.frame(scale(all_new_ID_tmp))
all_new_ID_tmp=as.data.frame(t(all_new_ID_raw))
